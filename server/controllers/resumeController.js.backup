const Employee = require('../models/Employee');
const OpenAI = require('openai');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

console.log('OpenAI API Key configured:', !!process.env.OPENAI_API_KEY);

const generateResume = async (req, res) => {
  const { employeeId, jobDescription, templateType } = req.body;

  console.log('=== GENERATE RESUME REQUEST ===');
  console.log('Employee ID:', employeeId);
  console.log('Job Description:', jobDescription?.substring(0, 100) + '...');
  console.log('Template Type:', templateType);

  if (!employeeId || !jobDescription || !templateType) {
    console.log('Missing required parameters');
    return res.status(400).json({ message: 'Employee ID, Job Description, and Template Type are required.' });
  }

  if (!['freelance', 'techstack'].includes(templateType)) {
    console.log('Invalid template type:', templateType);
    return res.status(400).json({ message: 'Template Type must be either "freelance" or "techstack".' });
  }

  try {
    console.log('Looking up employee...');
    const employee = await Employee.findById(employeeId);
    if (!employee) {
      console.log('Employee not found:', employeeId);
      return res.status(404).json({ message: 'Employee not found.' });
    }

    console.log('Employee found:', employee.name);
    console.log('Resume data available:', !!employee.resumeData?.[templateType]);

    const resumeData = employee.resumeData?.[templateType];

    if (!resumeData) {
      console.log('No resume data found for template:', templateType);
    }

    console.log('Resume data structure:', Object.keys(resumeData));
    const baseResumeString = JSON.stringify(resumeData);

    // Define styling for the resume
    const styling = {
      fonts: {
        primary: templateType === 'freelance' ? 'Georgia, serif' : 'Arial, sans-serif',
        secondary: 'Arial, sans-serif',
        heading: templateType === 'freelance' ? 'Georgia, serif' : 'Arial, sans-serif'
      },
      colors: {
        primary: templateType === 'freelance' ? '#2c3e50' : '#1a365d',
        secondary: templateType === 'freelance' ? '#34495e' : '#2d3748',
        accent: templateType === 'freelance' ? '#3498db' : '#3182ce'
      },
      boldKeywords: ['Led', 'Managed', 'Developed', 'Implemented', 'Designed', 'Optimized', 'Increased', 'Reduced', 'Achieved', 'Delivered', 'Skilled', 'Expertise', 'Passionate', 'Hands-on', 'Building', 'Secure', 'Scalable', 'Performance', 'years', 'year', 'Blockchain', 'Full-Stack', 'Smart Contracts', 'Decentralized Applications', 'EVM-based chains', 'Solana', 'Polygon', 'ZKsync Era', 'ZK-SNARKs', 'Core Layer-1 blockchain development', 'Python', 'JAM protocol']
    };

    // Check if OpenAI API key is available
    console.log('Checking API key:', process.env.OPENAI_API_KEY);
    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'test' || process.env.OPENAI_API_KEY.length < 20) {
      console.log('Using mock response - OpenAI API key not configured or too short');
      const mockResponse = {
        experience: resumeData.experience || [],
        projects: resumeData.projects || [],
        skills: resumeData.skills || []
      };

      // Generate mock LaTeX resume
      const generateMockLatexResume = (employee, styling) => {
        const { name } = employee;

        const escapeLatex = (text) => {
          if (!text) return '';
          return text
            .replace(/\\/g, '\\textbackslash{}')
            .replace(/&/g, '\\&')
            .replace(/%/g, '\\%')
            .replace(/\$/g, '\\$')
            .replace(/#/g, '\\#')
            .replace(/_/g, '\\_')
            .replace(/\{/g, '\\{')
            .replace(/\}/g, '\\}')
            .replace(/\~/g, '\\textasciitilde{}')
            .replace(/\^/g, '\\textasciicircum{}');
        };

        return `% Sections formatting
\\titleformat{\\section}{
  \\vspace{-4pt}\\scshape\\raggedright\\normalsize
}{}{0em}{}[\\vspace{-5pt}]

%-------------------------
% Custom commands
\\newcommand{\\resumeItem}[2]{
  \\item\\small{
    \\textbf{#1}{: #2} \\vspace{-2pt}
  }
}

\\newcommand{\\resumeSubheading}[4]{
  \\vspace{-1pt}\\item
    \\begin{tabular*}{0.97\\textwidth}{l@{\\extracolsep{\\fill}}r}
      \\textbf{#1} & #2 \\\\
      \\textit{\\small#3} & \\textit{\\small #4} \\\\
    \\end{tabular*}\\vspace{-5pt}
}

\\newcommand{\\resumeSubItem}[2]{\\resumeItem{#1}{#2}\\vspace{-4pt}}

\\renewcommand{\\labelitemii}{$\\circ$}

\\newcommand{\\resumeSubHeadingListStart}{\\begin{itemize}[leftmargin=*]}
\\newcommand{\\resumeSubHeadingListEnd}{\\end{itemize}}
\\newcommand{\\resumeItemListStart}{\\begin{itemize}}
\\newcommand{\\resumeItemListEnd}{\\end{itemize}\\vspace{-5pt}}

%-------------------------------------------
%%%%%%  CV STARTS HERE  %%%%%%%%%%%%%%%%%%%%%%%%%%%%

\\begin{document}
%----------HEADING-----------------
{\\large \\textbf{${escapeLatex(name)}}}

%-----------SUMMARY-----------------
\\noindent
\\begin{tabular*}{\\textwidth}{l@{\\extracolsep{\\fill}}r}
    \\textbf{\\normalsize Summary} & \\textbf{Freelance Rate: \\$150 / hour} \\\\
\\end{tabular*}

\\vspace{2pt}
**Professional** summary for ${templateType} template based on job requirements.

%-----------EXPERIENCE-----------------
\\section{Experience}
\\resumeSubHeadingListStart

\\resumeSubheading
  {Tech Company}{2024 – Present}
  {Software Engineer}{}
\\resumeItemListStart
  \\resumeItem{Development}
    {Worked on various software development projects using modern technologies and best practices.}
  \\resumeItem{Team Collaboration}
    {Collaborated with cross-functional teams to deliver high-quality software solutions.}
\\resumeItemListEnd

\\resumeSubHeadingListEnd

%-----------PROJECTS-----------------
\\section{Projects}
\\resumeSubHeadingListStart

\\resumeSubItem{Sample Project}
  {A sample project demonstrating technical skills and problem-solving abilities.}

\\resumeSubHeadingListEnd

%-----------SKILLS------------
\\section{Skills}
\\resumeSubHeadingListStart
\\item{\\textbf{Core Technologies:} JavaScript • Python • Java}
\\item{\\textbf{Tools & Technologies:} Git • GitHub • VS Code • Postman • REST APIs • JSON • Agile/Scrum • Problem Solving • Debugging • Code Review}
\\item{\\textbf{Development Fundamentals:} HTML5 • CSS3 • JavaScript (ES6+) • Responsive Design • Cross-browser Compatibility • Version Control • Documentation}
\\resumeSubHeadingListEnd

\\end{document}`;
      };

      const finalResume = {
        name: employee.name,
        phone: employee.phone,
        telegram: employee.telegram,
        templateType,
        summary: `**Professional** summary for ${templateType} template based on job requirements.`,
        experience: resumeData.experience || [],
        projects: resumeData.projects || [],
        skills: resumeData.skills || [],
        styling,
        latexContent: generateMockLatexResume(employee, styling)
      };

      return res.json(finalResume);
    }

    // Enhanced prompt based on template type
    const getPrompt = (templateType) => {
      const basePrompt = `You are an expert technical resume writer specializing in tailoring resumes for specific job applications. Your task is to intelligently adapt the provided base resume to PERFECTLY match the job description.

1. JOB DESCRIPTION ANALYSIS - FIRST PRIORITY:
   - CAREFULLY analyze the provided job description to understand the specific requirements
   - Extract ALL required technologies, programming languages, frameworks, and tools mentioned
   - Identify the industry, role type, experience level, and specific responsibilities
   - DO NOT assume any technology stack - use ONLY what's mentioned in the job description
   - Use these EXACT requirements to tailor the entire resume

2. COMPANY NAME PRESERVATION:
   - DO NOT change company names based on job description
   - Current company name must remain exactly the same
   - Previous company names should also remain unchanged
   - Only adapt job titles, technologies, and content to match job requirements

3. EXPERIENCE DATES - MUST ADJUST FOR JOB REQUIREMENTS:
   - Current year is 2024, so adjust dates realistically
   - CRITICAL: Experience dates MUST be in CHRONOLOGICAL order
   - Each subsequent job MUST start AFTER the previous job ends
   - NO OVERLAPPING dates between experiences

4. CONTENT ADAPTATION - REPLACE WITH JOB-SPECIFIC CONTENT:
   - COMPLETELY REWRITE experience bullet points to match job responsibilities
   - Use the EXACT technologies and terminology mentioned in the job description
   - Replace any mismatched technologies with those specifically required in the job
   - Ensure ALL bullet points reflect the job's key responsibilities and requirements

5. PROJECTS - MINIMUM 3-4 PROJECTS:
   - Ensure AT LEAST 3-4 projects in the resume
   - COMPLETELY REWRITE projects using technologies from the job description
   - Each project description must be 40-50 words long

6. SKILLS - JOB-SPECIFIC ONLY:
   - REPLACE existing skills with skills from the job description
   - Prioritize skills explicitly mentioned in the job requirements
   - Add any missing job-required skills
   - Remove any skills not relevant to this specific job

TEMPLATE-SPECIFIC REQUIREMENTS:`;

      if (templateType === 'freelance') {
        return basePrompt + `FREELANCE TEMPLATE SPECIFICATIONS:
- Generate a professional summary (2-3 sentences) tailored to the job description
- Generate 3-4 distinct company experiences with job-specific content
- Structure must follow: Company → Role → Period → Bullet Points
- Focus on independent work, client projects, and entrepreneurial achievements
- Emphasize soft skills, communication, and project management
- Use professional but approachable tone

FREELANCE-SPECIFIC CONTENT:
- Highlight client relationship management and project delivery
- Include cross-functional collaboration and stakeholder communication
- Emphasize problem-solving and independent decision-making
- Show ability to work with diverse clients and requirements`;
      } else {
        return basePrompt + `TECHSTACK TEMPLATE SPECIFICATIONS:
- Prioritize and feature experience from "TechSteck Solutions LLP" most prominently
- Generate professional summary matching technical/enterprise tone
- Include 2-3 additional relevant company experiences
- Structure must emphasize technical expertise and team collaboration
- Focus on technical achievements, system design, and scalable solutions

TECHSTACK-SPECIFIC CONTENT:
- Highlight technical leadership and system architecture
- Include team collaboration and mentorship experience
- Emphasize scalable solution development and performance optimization
- Show expertise in complex technical environments`;
      }
    };

    const prompt = getPrompt(templateType) + `

Job Description:
\`\`\`
${jobDescription}
\`\`\`

Base Resume (JSON format):
\`\`\`json
${baseResumeString}
\`\`\`

OUTPUT REQUIREMENTS:
- Return ONLY valid JSON with structure: { "experience": [...], "projects": [...], "skills": [...] }
- COMPLETELY ADAPT ALL CONTENT to match the job description exactly
- KEEP ALL COMPANY NAMES UNCHANGED
- Experience periods MUST reflect the job's experience requirements
- Experience dates MUST be in strict chronological order with NO overlaps
- REPLACE technologies to match the ACTUAL job requirements
- Minimum 3-4 projects with detailed 40-50 word descriptions using job technologies
- Skills must match job requirements exactly
- Use current year 2024 as reference for date calculations`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      response_format: { type: "json_object" },
      max_tokens: 2000,
      temperature: 0.7,
    });

    console.log('OpenAI API call completed successfully');

    const tailoredResume = JSON.parse(response.choices[0].message.content);

    console.log('Resume generation completed successfully');

    // Generate professional summary based on job description and template
    console.log('Starting summary generation...');

    // Generate professional summary based on job description and template
    const summaryPrompt = `
Generate a professional summary (2-3 sentences) for a resume based on:

1. Job Description:
${jobDescription}

2. Template Type: ${templateType}

3. Base Resume Data:
${baseResumeString}

4. Important Keywords to Bold: ${styling.boldKeywords.join(', ')}

The summary should:
- Be tailored to the specific job requirements
- Highlight relevant experience and skills from the job description
- Be professional and concise (2-3 sentences)
- Match the tone of the ${templateType} template
- Focus on key achievements and expertise areas
- Include specific technologies and years of experience mentioned in the job
- Use **bold** formatting for important keywords like: Led, Managed, Developed, Implemented, Designed, Optimized, Increased, Reduced, Achieved, Delivered

Example format:
"**Blockchain** and **Full-Stack Developer** with **5 years** of experience, including **4 years** in blockchain development and **1 year** in full MERN stack web applications. **Skilled** in building **secure**, **scalable** blockchain systems, **smart contracts**, and **decentralized applications** (dApps). **Hands-on expertise** with **EVM-based chains**, **Solana**, **Polygon**, **ZKsync Era**, **ZK-SNARKs**, and **core Layer-1 blockchain development** in **Python** following the **JAM protocol**. **Passionate** about advancing **decentralized ecosystems** with **performance**, **scalability**, and **developer-friendly tooling**."

Return ONLY the summary text with **bold** formatting for important words, no quotes or additional formatting.`;

    const summaryResponse = await openai.chat.completions.create({
      model: 'gpt-4-turbo',
      messages: [{ role: 'user', content: summaryPrompt }],
      max_tokens: 300,
      temperature: 0.5,
    });

    const professionalSummary = summaryResponse.choices[0].message.content.trim();

    console.log('Summary generated successfully:', professionalSummary.substring(0, 100) + '...');

    // Generate LaTeX resume based on the data
    const generateLatexResume = (employee, tailoredResume, professionalSummary, styling) => {
      const { name, phone, telegram } = employee;

      // Escape LaTeX special characters in content
      const escapeLatex = (text) => {
        if (!text) return '';
        return text
          .replace(/\\/g, '\\textbackslash{}')
          .replace(/&/g, '\\&')
          .replace(/%/g, '\\%')
          .replace(/\$/g, '\\$')
          .replace(/#/g, '\\#')
          .replace(/_/g, '\\_')
          .replace(/\{/g, '\\{')
          .replace(/\}/g, '\\}')
          .replace(/\~/g, '\\textasciitilde{}')
          .replace(/\^/g, '\\textasciicircum{}');
      };

      const currentYear = new Date().getFullYear();

      // Format experience entries
      const experienceLatex = tailoredResume.experience?.map(exp => {
        const company = escapeLatex(exp.company);
        const role = escapeLatex(exp.role);
        const period = escapeLatex(exp.period);
        const location = escapeLatex(exp.location || '');

        const items = exp.items?.map(item => {
          const title = escapeLatex(item.title);
          const description = escapeLatex(item.description);
          return `  \\resumeItem{${title}}\n    {${description}}`;
        }).join('\n');

        return `\n\\resumeSubheading\n  {${company}}{${period}}\n  {${role}}{${location}}\n\\resumeItemListStart\n${items}\n\\resumeItemListEnd`;
      }).join('') || '';

      // Format projects
      const projectsLatex = tailoredResume.projects?.map(project => {
        const name = escapeLatex(project.name);
        const description = escapeLatex(project.description);
        return `\n\\resumeSubItem{${name}}\n  {${description}}`;
      }).join('') || '';

      // Format skills - simple join like frontend
      const skillsLatex = tailoredResume.skills?.map(skill => {
        return escapeLatex(skill);
      }).join(' • ') || '';

      // Process summary to add bold formatting
      let processedSummary = escapeLatex(professionalSummary);
      styling.boldKeywords.forEach(keyword => {
        const regex = new RegExp(`\\*\\*${keyword}\\*\\*`, 'gi');
        processedSummary = processedSummary.replace(regex, `\\textbf{${keyword}}`);
      });
      // Remove any remaining ** that weren't replaced
      processedSummary = processedSummary.replace(/\*\*/g, '');

      return `%-------------------------
% Resume in LaTeX
% Author : ${escapeLatex(name)}
% Generated for Job Application
%------------------------

\\documentclass[letterpaper,11pt]{article}

\\usepackage{latexsym}
\\usepackage[empty]{fullpage}
\\usepackage{titlesec}
\\usepackage{marvosym}
\\usepackage[usenames,dvipsnames]{color}
\\usepackage{verbatim}
\\usepackage{enumitem}
\\usepackage[pdftex]{hyperref}
\\usepackage{fancyhdr}

\\pagestyle{fancy}
\\fancyhf{}
\\fancyfoot{}
\\renewcommand{\\headrulewidth}{0pt}
\\renewcommand{\\footrulewidth}{0pt}

% Adjust margins
\\addtolength{\\oddsidemargin}{-0.375in}
\\addtolength{\\evensidemargin}{-0.375in}
\\addtolength{\\textwidth}{1in}
\\addtolength{\\topmargin}{-.5in}
\\addtolength{\\textheight}{1.0in}

\\urlstyle{same}

\\raggedbottom
\\raggedright
\\setlength{\\tabcolsep}{0in}

% Sections formatting
\\titleformat{\\section}{
  \\vspace{-4pt}\\scshape\\raggedright\\large
}{}{0em}{}[\\color{black}\\titlerule \\vspace{-5pt}]

%-------------------------
% Custom commands
\\newcommand{\\resumeItem}[2]{
  \\item\\small{
    \\textbf{#1}{: #2} \\vspace{-2pt}
  }
}

\\newcommand{\\resumeSubheading}[4]{
  \\vspace{-1pt}\\item
    \\begin{tabular*}{0.97\\textwidth}{l@{\\extracolsep{\\fill}}r}
      \\textbf{#1} & #2 \\\\
      \\textit{\\small#3} & \\textit{\\small #4} \\\\
    \\end{tabular*}\\vspace{-5pt}
}

\\newcommand{\\resumeSubItem}[2]{\\resumeItem{#1}{#2}\\vspace{-4pt}}

\\renewcommand{\\labelitemii}{$\\circ$}

\\newcommand{\\resumeSubHeadingListStart}{\\begin{itemize}[leftmargin=*]}
\\newcommand{\\resumeSubHeadingListEnd}{\\end{itemize}}
\\newcommand{\\resumeItemListStart}{\\begin{itemize}}
\\newcommand{\\resumeItemListEnd}{\\end{itemize}\\vspace{-5pt}}

%-------------------------------------------
%%%%%%  CV STARTS HERE  %%%%%%%%%%%%%%%%%%%%%%%%%%%%

\\begin{document}
%----------HEADING-----------------
\\begin{center}
    {\\LARGE \\textbf{${escapeLatex(name)}}}
\\end{center}

%-----------SUMMARY-----------------
\\noindent
\\begin{tabular*}{\\textwidth}{l@{\\extracolsep{\\fill}}r}
    \\textbf{\\large Summary} & \\textbf{Freelance Rate: \\$150 / hour} \\\\
\\end{tabular*}
\\vspace{-3pt}
\\hrule

\\vspace{2pt}
${processedSummary}

%-----------EXPERIENCE-----------------
\\section{Experience}
\\resumeSubHeadingListStart
${experienceLatex}
\\resumeSubHeadingListEnd

%-----------PROJECTS-----------------
\\section{Projects}
\\resumeSubHeadingListStart
${projectsLatex}
\\resumeSubHeadingListEnd

%-----------SKILLS------------
\\section{Skills}
\\resumeSubHeadingListStart
\\item{${skillsLatex}}
\\resumeSubHeadingListEnd

\\end{document}`;

    // Generate the LaTeX resume
    const latexResume = generateLatexResume(employee, tailoredResume, professionalSummary, styling);
    const finalResume = {
      name: employee.name,
      phone: employee.phone,
      telegram: employee.telegram,
      templateType,
      summary: professionalSummary,
      experience: tailoredResume.experience || [],
      projects: tailoredResume.projects || [],
      skills: tailoredResume.skills || [],
      styling,
      latexContent: latexResume // Include LaTeX for download
    };

    res.json(finalResume);

  } catch (error) {
    console.error('Error generating resume:', error);

    // More specific error messages
    if (error.response) {
      console.error('OpenAI API Error:', error.response.data);
      res.status(500).json({ message: 'AI service error: ' + (error.response.data.error?.message || 'Unknown error') });
    } else if (error.code === 'ECONNREFUSED') {
      res.status(500).json({ message: 'Unable to connect to AI service' });
    } else if (error.message && error.message.includes('timeout')) {
      res.status(500).json({ message: 'AI service timeout - please try again' });
    } else if (error.message && error.message.includes('JSON')) {
      res.status(500).json({ message: 'AI service returned invalid data format' });
    } else {
      res.status(500).json({ message: 'Failed to generate resume: ' + (error.message || 'Unknown error') });
    }
  }
};

module.exports = { generateResume };
